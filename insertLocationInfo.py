"""
Tony Sanchez
10/20/2017
Georgetown Cohort 10: The Data Extractors Team

Description:
This is Python code updates and cleans the crime_incidents DB on postgres
with neighborhood_cluster information in missing fields.
"""

import pandas as pd
import checkLocation
from sqlalchemy import create_engine, Table, Column, String, Integer, Boolean, insert

def updateCrimeIncidentInfo(newclustervalue, neighborhood_desc, objectid_value):
    stm1 = "UPDATE crime_incidents SET"
    stm2 = " neighborhood_cluster = " + "'" + newclustervalue + "'" + ","
    stm3 = " neighborhood_description = " + "'" + neighborhood_desc + "'"
    stm4 = " WHERE objectid = " + str(objectid_value)
    stm5 = stm1 + stm2 + stm3 + stm4
    print("Exectuting: " + stm5)
    engine.execute(stm5)

"""
This is a function written to insure the neighborhood_clusters are filled and accurate. There
are multiple Lat/Lon and census_tract info provided so each set of location data needed to
be verified and then used to fill empty rows.
"""
def insertNeighborhoodDesc(nameTable):
    stmt = 'SELECT X, Y, neighborhood_cluster, adjusted_neighborhood_cluster, census_tract, BID, objectid, neighborhood_description FROM ' + nameTable
    #stmt = 'SELECT X, Y, neighborhood_cluster, census_tract, BID, objectid FROM crime_incidents WHERE neighborhood_cluster = ' + "'N'"
    print("Exectuting: " + stmt)
    results = connection.execute(stmt).fetchall()
    counter = 0

    for item in results:
        ##Pointing to the X and Y points in each row
        lon = item[0]
        lat = item[1]
        newCluster = checkLocation.getNeighborhoodClusterLatLon(path, lat, lon)
        #Use function to replace and input new value into the neighborhood_cluster field & the neighborhood_description
        if newCluster[0] != item[2]:
            if item[2] == None:
                print(updateCrimeIncidentInfo(newCluster[0], newCluster[1], item[6]))
                print("Filled neighborhood_cluster to: " + newCluster[0])
            else:
                print("Clusters don't match.")
                print(updateCrimeIncidentInfo(newCluster[0], newCluster[1], item[6]))
                print("Old value: " + str(item[2]) + " is updated to " + newCluster[0])

            counter = counter + 1
            print("Counter is: " + str(counter))
        else:
            print("Could not get the results needed. The new cluster is: " + newCluster)

"""
This is a function written to compare, census_tract to cluster to two different X,Y and Lat Lon values
In the tables generated by OpenData. The results of this check was that the orgininal X,Y values
converted to neighborhood_cluster via insertNeighborhoodDesc, was the most accurate of all the functions.
"""
def insertNeighborhoodDescVerify(nameTable):
    stmt1 = 'SELECT X, Y, neighborhood_cluster, adjusted_neighborhood_cluster, census_tract, BID, objectid, neighborhood_description FROM ' + nameTable
    results1 = connection.execute(stmt1).fetchall()
    counter = 0

    for row in results1:
        ##Pointing to the X and Y points in each row
        lon = row[0]
        lat = row[1]
        newCluster = checkLocation.getNeighborhoodClusterLatLon(path, lat, lon)
        if newCluster[0] != row[2]:
            if row[2] != None:
                print("START Object ID: " + str(row[6]))
                newcensustractupdate = censusTractToInt(row[4])
                if str(row[4]) != newcensustractupdate:
                    print("Clusters don't match: ")
                    print("Original: " + str(row[2]))
                    print("Tony's conversion: " + newCluster[0])
                    print("Jay's conversion: " + newcensustractupdate)

                    counter = counter + 1
                    print("Counter is: " + str(counter))
                    print("---------------------------" )
"""
This function converts the census tract info in the crime_incidents DF,
to the census tract format located in our master DB on postgres.
"""
def censusTractToInt(censusTractNum):
    tract = str(censusTractNum)
    print("Orig tract num: " + tract)
    length = len(tract)
    if length > 2:
        if tract[-2:length] == "00":
            tract = tract[0:length-2]
            print("IN Here: " + tract)
        else:
            tract = tract[0:2] +"."+tract[2:length]
    else:
        print("Did not assign a tract!!")

    newtract = "Census Tract " + tract
    print("New tract is: " + tract)

    stmt3 = 'SELECT * from census_tracts where census = ' + "'" +newtract+"'"
    print(stmt3)
    results3 = connection.execute(stmt3).fetchall()
    return (results3[0][3])


if __name__ == '__main__':

    """
    Test Code that passed in a path to the shapefiles and kicks off the
    Wrangling process, filling in empty fields
    """
    shp_file_base='Neighborhood_Clusters'
    dat_dir='/Users/anthonysanchez/Downloads/'+shp_file_base +'/'
    path = dat_dir+shp_file_base
    print("Path is: " + path)
    print ("Processing............ ")
    #insertNeighborhoodDesc(nameTable)
    ##print("Neighborhood is: " + str(getNeighborhoodClusterLatLon(path,lat,lon)))
